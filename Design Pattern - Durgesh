1. Singleton Design Pattern 
2. How to break singleton pattern and solution
3. Factory Method Design Pattern -
  - AndroidDeveloper.java and WebDeveloper.java
  - DeveloperClient (main) need not to create or bother about how to get the object of the developer.
    simply create (EmployeeFactory.java). this includes the logic to pass the object of developer according to the type provide
     e.g EmployeeFactory.getEmployee("ANDROID DEVELOPER") / "WEB DEVELOPER". 
     DeveloperClient need not worry how to get the developer. (Loose coupling)
   Advantages - 
   - Focus on main logic rather on implementaino of the developers
   - loose coupled
4. Abstract Factory Design Pattern -
  - similar to factory method design pattern. Differnece in layer of abstraction.
5. Builder Pattern
  - while creating object, it takes many attributes in constructor in factory pattern
  - hard to remember the sequence of the attr
  - if any attr is optional, then overload constructor
  - complexity of factory pattern
  - >> This pattern creates object by setting the attribute in chain fashion and at last calls build() to create new object
6. Prototype Design Pattern
  -  The concept is to copy an existing object rathr than creating a new instance from scrath. because creating new object may be costly.
  - This approach saves costly resource and time, especially when object creation is a heavy process. e.g network or db connection.
